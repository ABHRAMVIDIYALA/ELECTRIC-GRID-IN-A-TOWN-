class BoruvkasAlgorithm:
    def init(self, graph):
        self.graph = graph
        self.graph_edges = graph.edges_with_weight
        self.V = len(self.graph.nodes)
        self.cheapest = [-1] * self.V
        self.cheapest_nodes,self.parents, self.rank = [], [], []
        self.MST_weight = 0

    def find_cheapest(self):
        for i in range(len(self.graph.edges_with_weight)):
            u,v, w = self.graph.edges_with_weight[i]
            set1, set2 = u, v
            if set1 != set2:
                if self.cheapest[set1] == -1 or self.cheapest[set1][2] > w:
                    self.cheapest[set1] = [u, v, w]
                if self.cheapest[set2] == -1 or self.cheapest[set2][2] > w:
                    self.cheapest[set2] = [u, v, w]

    def union(self,x, y):
        xroot = self.find(self.parents, x)
        yroot = self.find(self.parents, y)
        if self.rank[xroot] < self.rank[yroot]:
            self.parents[xroot] = yroot
        elif self.rank[xroot] > self.rank[yroot]:
            self.parents[yroot] = xroot
        else:
            self.parents[yroot] = xroot
            self.rank[xroot] += 1

    def find_MST(self):
        numTrees = self.V
        MSTweight = 0

        for n in range(self.V):
            self.parents.append(n)
            self.rank.append(0)

        while numTrees > 1:
            self.find_cheapest()
            for node in range(self.V):
                if self.cheapest[node] != 1:
                    u, v, w = self.cheapest[node]
                    set1 = self.find(self.parents, u)
                    set2 = self.find(self.parents, v)
                    if set1 != set2:
                        MSTweight += w
                        self.union(set1, set2)
                        print("Edge %d-%d with weight %d included in MST" % (u, v, w))
                        numTrees = numTrees - 1

        self.cheapest_nodes = self.cheapest
        self.cheapest = [-1] * self.V
        self.MST_weight = MSTweight
        return MSTweight

    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])
